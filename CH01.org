#+TITLE: Chapter 1
#+OPTIONS: toc:nil


* Core Netty Components

** Channels


   A channel is a vehicle for incoming (inbound) and outgoing (outbound) data.
   As such, it can be open or closed, connected or disconnected.

** Callbacks

   A callback is simply a method, a reference to which has been provided to another method.
   Netty uses callbacks internally when handling events; when a callback is triggered the event can be handled by an implementation of interface ChannelHandler.

   For example:
   #+BEGIN_SOURCE java
   public class ConnectHandler extends ChannelInboundHandlerAdapter {

     @Override
     public void channelActive(ChannelHandlerContext ctx) throws Exception {
       System.out.println("Client " + ctx.channel().remoteAddress() + " connected");
     }

   }
   #+END_SOURCE

** Futures

   A Future provides another way to notify an application when an operation has completed.
   This object acts as a placeholder for the result of an asynchronous operation;
   it will complete at some point in the future and provide access to the result.
   The JDK ships with interface java.util.concurrent.Future, but the provided
   implementations allow you only to check manually whether the operation has completed or to block until it does.
   This is quite cumbersome, so Netty provides its own implementation, ChannelFuture , for use when an asynchronous operation is executed.

    #+BEGIN_SOURCE java
    Channel channel = ...;
    // Does not block
    ChannelFuture future = channel.connect(new InetSocketAddress("192.168.0.1", 25));

    future.addListener(new ChannelFutureListener() {
      @Override
      public void operationComplete(ChannelFuture future) {
        if (future.isSuccess()) {
          ByteBuf buffer = Unpooled.copiedBuffer("Hello", Charset.defaultCharset());
          ChannelFuture wf = future.channel().writeAndFlush(buffer);

          ....

        } else {
          Throwable cause = future.cause();
          cause.printStackTrace();
        }
      }
    });
    #+END_SOURCE

** Event Handlers

   Netty uses distinct events to notify us about changes of state or the status of operations.
   This allows us to trigger the appropriate action based on the event that has occurred.
   Every event can be dispatched to a user-implemented method of a handler class. This
   is a good example of an event-driven paradigm translating directly into application
   building blocks. Nettyâ€™s ChannelHandler provides the basic abstraction for handlers.

   #+BEGIN_SOURCE java

   #+END_SOURCE
